services:
  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - 9411:9411
    networks:
      - microservices-net

  postgres-client:
    container_name: ms-pg-sql-client
    image: postgres
    environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: client
          PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres_client:/var/lib/postgresql/data
    ports:
      - 5432:5432
    networks:
      - microservices-net
    restart: unless-stopped

  postgres-product:
    container_name: ms-pg-sql-product
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: product
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres_product:/var/lib/postgresql/data
    ports:
      - 5433:5432
    networks:
      - microservices-net
    restart: unless-stopped

  postgres-rental:
    container_name: ms-pg-sql-rental
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: rental
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres_rental:/var/lib/postgresql/data
    ports:
      - 5434:5432
    networks:
      - microservices-net
    restart: unless-stopped

  pgadmin:
    container_name: ms-pg-admin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
        - pgadmin:/var/lib/pgadmin
    ports:
        - 5050:80
    networks:
      - microservices-net
    restart: unless-stopped

#  config-service:
#    build:
#      context: ./services/config-server
#      dockerfile: Dockerfile
#    ports:
#      - 8888:8888
#    networks:
#      - microservices-net
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#
#  discovery-service:
#    build:
#      context: ./services/discovery
#      dockerfile: Dockerfile
#    ports:
#      - 8761:8761
#    networks:
#      - microservices-net
#    depends_on:
#      config-service:
#        condition: service_healthy
#
#  client-service:
#    build:
#      context: ./services/client
#      dockerfile: Dockerfile
#    ports:
#      - 8090:8090
#    networks:
#      - microservices-net
#    depends_on:
#      zipkin:
#        condition: service_started
#      postgres:
#        condition: service_started
#      config-service:
#        condition: service_healthy
#      discovery-service:
#        condition: service_started
#
#  product-service:
#    build:
#      context: ./services/product
#      dockerfile: Dockerfile
#    ports:
#      - 8050:8050
#    networks:
#      - microservices-net
#    depends_on:
#      zipkin:
#        condition: service_started
#      postgres:
#        condition: service_started
#      config-service:
#        condition: service_healthy
#      discovery-service:
#        condition: service_started
#
#  rental-service:
#    build:
#      context: ./services/rental
#      dockerfile: Dockerfile
#    ports:
#      - 8070:8070
#    networks:
#      - microservices-net
#    depends_on:
#      zipkin:
#        condition: service_started
#      postgres:
#        condition: service_started
#      config-service:
#        condition: service_healthy
#      discovery-service:
#        condition: service_started
#
#  gateway-service:
#    build:
#      context: ./services/gateway
#      dockerfile: Dockerfile
#    ports:
#      - 8222:8222
#    networks:
#      - microservices-net
#    depends_on:
#      zipkin:
#        condition: service_started
#      postgres:
#        condition: service_started
#      config-service:
#        condition: service_healthy
#      discovery-service:
#        condition: service_started
#      client-service:
#        condition: service_started
#      product-service:
#        condition: service_started
#      rental-service:
#        condition: service_started

networks:
  microservices-net:
    driver: bridge
volumes:
  postgres_client:
  postgres_product:
  postgres_rental:
  pgadmin:
